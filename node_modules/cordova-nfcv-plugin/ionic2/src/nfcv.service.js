var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs/Rx';
var NfcvService = /** @class */ (function () {
    function NfcvService() {
        this.commands = {
            "getSystemInfo": [0x00, 0x2B]
        };
        this.ndefRecordWithDeviceName = 0;
        this.tagListener = null;
        this.ndefSubject = new BehaviorSubject(null);
        this.ndefError = new BehaviorSubject(null);
        this.tagSubject = new Subject();
        this.tagError = new Subject();
    }
    // NfcV methods
    NfcvService.prototype.init = function () {
        return new Promise(function (resolve, reject) {
            NfcV.init(function (success) {
                resolve(success);
            }, function (error) {
                reject(error);
            });
        });
    };
    NfcvService.prototype.isAvailable = function () {
        return new Promise(function (resolve, reject) {
            NfcV.checkNfcVAvailability(function (success) {
                resolve(success);
            }, function (error) {
                reject(error);
            });
        });
    };
    NfcvService.prototype.getSystemInfo = function (startListen) {
        var _this = this;
        console.log('** SYSTEM INFO START **');
        return new Promise(function (mainResolve, mainReject) {
            _this.startListening(startListen)
                .then(function () {
                NfcV.transceive(new Uint8Array(_this.commands.getSystemInfo), function (systemInfoData) {
                    var systemInfoBytes = new Uint8Array(systemInfoData);
                    console.log('** SYSTEM INFO END **', systemInfoBytes);
                    if (systemInfoBytes[0] !== 0) {
                        if (systemInfoBytes.length >= 1) {
                            mainReject('E_SYSTEM_INFO_FAILED | ERROR CODE: ' + systemInfoBytes[1]);
                        }
                        else {
                            mainReject('E_SYSTEM_INFO_FAILED | RESPONSE CODE: ' + systemInfoBytes[0]);
                        }
                    }
                    else {
                        mainResolve(_this.Uint8ArraySplice(systemInfoBytes, 0, 1));
                    }
                }, function (error) {
                    mainReject(error);
                });
            })
                .catch(function (error) {
                mainReject(error);
            });
        });
    };
    NfcvService.prototype.waitForNdef = function () {
        var _this = this;
        document.addEventListener('NdefTag', function (event) {
            console.log('NdefTag Event', event);
            var deviceTitle = _this.parseNdef(JSON.parse(event.ndef));
            if (deviceTitle == 'UNDEFINED_NDEF' || deviceTitle == 'NDEF_PARSE_ERROR') {
                _this.ndefError.next(deviceTitle);
            }
            else {
                _this.ndefSubject.next(deviceTitle);
            }
        }, true);
        NfcV.addNdefListener();
    };
    NfcvService.prototype.onNdef = function (onSuccess, onError) {
        this.ndefSubject.subscribe(function (data) {
            onSuccess(data);
        });
        this.ndefError.subscribe(function (error) {
            onError(error);
        });
    };
    NfcvService.prototype.waitForTag = function (device) {
        var _this = this;
        if (this.tagListener === null) {
            this.tagListener = this.startListening(true, device)
                .then(function (data) {
                _this.tagListener = null;
                _this.tagSubject.next(data);
            })
                .catch(function (error) {
                _this.tagListener = null;
                _this.tagError.next(error);
            });
        }
    };
    NfcvService.prototype.onTag = function (onSuccess, onError) {
        this.tagSubject.subscribe(function (data) {
            onSuccess(data);
        });
        this.tagError.subscribe(function (error) {
            onError(error);
        });
    };
    NfcvService.prototype.startListening = function (startListen, device) {
        var _this = this;
        if (startListen === undefined) {
            startListen = true;
        }
        if (startListen) {
            return new Promise(function (resolve, reject) {
                NfcV.startListening(function (data) {
                    if (device !== undefined) {
                        var ndef = _this.parseNdef(new Uint8Array(data));
                        if (device.regexp.test(ndef)) {
                            resolve(new Uint8Array(data));
                        }
                        else {
                            reject("E_WRONG_DEVICE_TYPE");
                        }
                    }
                    else {
                        resolve(new Uint8Array(data));
                    }
                }, function (error) {
                    reject(error);
                });
            });
        }
        else {
            return new Promise(function (resolve) { resolve(null); });
        }
    };
    NfcvService.prototype.stopListening = function () {
        NfcV.stopListening();
    };
    NfcvService.prototype.transceive = function (data) {
        return new Promise((function (resolve, reject) {
            NfcV.transceive(data, function (res) { return resolve(new Uint8Array(res)); }, function (err) { return reject(err); });
        }));
    };
    NfcvService.prototype.read = function (blocks, startListen, device) {
        var _this = this;
        console.log('** READ START **', blocks);
        var readData = [];
        return new Promise(function (mainResolve, mainReject) {
            _this.startListening(startListen, device)
                .then(function () {
                // Create promise that immediately resolves
                var readPromise = new Promise(function (readResolve) {
                    readResolve();
                });
                var _loop_1 = function (block) {
                    // Chain read blocks
                    readPromise = readPromise
                        .then(function () {
                        return _this.readBlock(block.block, false)
                            .then(function (data) {
                            readData.push({
                                "block": block.block,
                                "data": data
                            });
                        });
                    });
                };
                for (var _i = 0, blocks_1 = blocks; _i < blocks_1.length; _i++) {
                    var block = blocks_1[_i];
                    _loop_1(block);
                }
                // Finally resolve main promise
                readPromise
                    .then(function () {
                    console.log('** READ END **', readData);
                    mainResolve(readData);
                })
                    .catch(function (error) {
                    mainReject(error);
                });
            })
                .catch(function (error) {
                mainReject(error);
            });
        });
    };
    NfcvService.prototype.readBlock = function (block, startListen) {
        var _this = this;
        console.log('** READ BLK START **', block);
        return new Promise(function (mainResolve, mainReject) {
            _this.startListening(startListen)
                .then(function () {
                NfcV.readBlock(block, function (data) {
                    var dataBytes = new Uint8Array(data);
                    console.log('** READ BLK END **', dataBytes);
                    if (dataBytes[0] !== 0) {
                        mainReject('E_READ_FAILED - BLOCK: ' + block + ' | CODE: ' + dataBytes[1]);
                    }
                    else {
                        mainResolve(_this.Uint8ArraySplice(dataBytes, 0, 1));
                    }
                }, function (error) {
                    mainReject(error);
                });
            })
                .catch(function (error) {
                mainReject(error);
            });
        });
    };
    NfcvService.prototype.write = function (blocks, startListen, device) {
        var _this = this;
        console.log('** WRITE START **', blocks);
        var writtenData = [];
        return new Promise(function (mainResolve, mainReject) {
            _this.startListening(startListen, device)
                .then(function () {
                // Create promise that immediately resolves
                var writePromise = new Promise(function (writeResolve) {
                    writeResolve();
                });
                var _loop_2 = function (block) {
                    // Chain write blocks
                    writePromise = writePromise
                        .then(function () {
                        return _this.writeBlock(block.block, block.data, false)
                            .then(function (response) {
                            writtenData.push({
                                "block": block.block,
                                "data": block.data,
                                "response": response
                            });
                        });
                    });
                };
                for (var _i = 0, blocks_2 = blocks; _i < blocks_2.length; _i++) {
                    var block = blocks_2[_i];
                    _loop_2(block);
                }
                // Finally resolve main promise
                writePromise
                    .then(function () {
                    console.log('** WRITE END **', writtenData);
                    mainResolve(writtenData);
                })
                    .catch(function (error) {
                    mainReject(error);
                });
            })
                .catch(function (error) {
                mainReject(error);
            });
        });
    };
    NfcvService.prototype.writeBlock = function (block, data, startListen) {
        var _this = this;
        console.log('** WRITE BLK START **', block, data);
        return new Promise(function (mainResolve, mainReject) {
            _this.startListening(startListen)
                .then(function () {
                NfcV.writeBlock(block, data, function (response) {
                    var responseBytes = new Uint8Array(response);
                    console.log('** WRITE BLK END **', responseBytes);
                    if (responseBytes[0] !== 0) {
                        mainReject('E_WRITE_FAILED - BLOCK: ' + block + ' | CODE: ' + responseBytes[1]);
                    }
                    else {
                        mainResolve(responseBytes);
                    }
                }, function (error) {
                    mainReject(error);
                });
            })
                .catch(function (error) {
                mainReject(error);
            });
        });
    };
    NfcvService.prototype.readRange = function (startBlock, endBlock, startListen, device) {
        var blocks = [];
        for (var i = startBlock; i <= endBlock; i++) {
            blocks.push({
                block: new Uint8Array([i])
            });
        }
        return this.read(blocks, startListen, device)
            .then(function (readData) {
            var allData = [];
            readData.forEach(function (item) {
                for (var i = 0; i < item.data.length; i++) {
                    allData.push(item.data[i]);
                }
            });
            return new Uint8Array(allData);
        });
    };
    NfcvService.prototype.readUntil = function (startBlock, checkConditionUntil, maxBlocks, startListen) {
        var _this = this;
        return new Promise(function (readResolve, readReject) {
            var blocks = [];
            var readNextAction = function (blockIndx) {
                if (maxBlocks !== undefined && blockIndx > maxBlocks) {
                    // Done reading
                    readResolve(blocks);
                    return;
                }
                var blockAddr = new Uint8Array([startBlock + blockIndx]);
                _this.readBlock(blockAddr, blockIndx == 0 ? startListen : false)
                    .then(function (blockData) {
                    // If checkConditionUntil returns true then reading is not completed
                    if (checkConditionUntil(blockData, blockAddr, blockIndx)) {
                        blocks.push({
                            block: blockAddr,
                            data: blockData
                        });
                        readNextAction(++blockIndx);
                    }
                    else {
                        // If it returns false, reading is done and we can return all blocks
                        blocks.push({
                            block: blockAddr,
                            data: blockData
                        });
                        readResolve(blocks);
                    }
                })
                    .catch(function (error) {
                    readReject(error);
                });
            };
            readNextAction(0);
        });
    };
    // Helper methods
    NfcvService.prototype.parseNdef = function (ndef) {
        if (ndef.length < 1) {
            return 'UNDEFINED_NDEF';
        }
        var ndefParser = require('@taptrack/ndef');
        var message;
        try {
            message = ndefParser.Message.fromBytes(ndef);
        }
        catch (e) {
            return 'NDEF_PARSE_ERROR';
        }
        var records = message.getRecords();
        if (records.length > this.ndefRecordWithDeviceName) {
            var recordContents = ndefParser.Utils.resolveTextRecord(records[this.ndefRecordWithDeviceName]);
            return recordContents.content;
        }
        else {
            return 'NDEF_PARSE_ERROR';
        }
    };
    NfcvService.prototype.Uint8ArraySplice = function (arr, starting, deleteCount, elements) {
        if (arguments.length === 1) {
            return arr;
        }
        starting = Math.max(starting, 0);
        deleteCount = Math.max(deleteCount, 0);
        elements = elements || [];
        var newSize = arr.length - deleteCount + elements.length;
        var splicedArray = new arr.constructor(newSize);
        splicedArray.set(arr.subarray(0, starting));
        splicedArray.set(elements, starting);
        splicedArray.set(arr.subarray(starting + deleteCount), starting + elements.length);
        return splicedArray;
    };
    NfcvService.prototype.byteArrayToInt = function (byteArray) {
        var value = 0;
        for (var i = byteArray.length - 1; i >= 0; i--) {
            value = (value * 256) + byteArray[i];
        }
        return value;
    };
    ;
    NfcvService.prototype.bytesToString = function (array) {
        var result = "";
        for (var i = 0; i < array.length; i++) {
            result += String.fromCharCode(array[i]);
        }
        return result;
    };
    NfcvService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], NfcvService);
    return NfcvService;
}());
export { NfcvService };
//# sourceMappingURL=nfcv.service.js.map