export declare class NfcvService {
    private commands;
    private ndefRecordWithDeviceName;
    private ndefSubject;
    private ndefError;
    private tagSubject;
    private tagError;
    private tagListener;
    constructor();
    init(): Promise<{}>;
    isAvailable(): Promise<{}>;
    getSystemInfo(startListen?: any): Promise<{}>;
    waitForNdef(): void;
    onNdef(onSuccess: Function, onError: Function): void;
    waitForTag(device?: any): void;
    onTag(onSuccess: Function, onError: Function): void;
    startListening(startListen?: any, device?: any): Promise<{}>;
    stopListening(): void;
    transceive(data: any): Promise<{}>;
    read(blocks: any[], startListen?: any, device?: any): Promise<any>;
    readBlock(block: any, startListen?: any): Promise<any>;
    write(blocks: any[], startListen?: any, device?: any): Promise<any>;
    writeBlock(block: any, data: any, startListen?: any): Promise<any>;
    readRange(startBlock: any, endBlock: any, startListen?: any, device?: any): Promise<Uint8Array>;
    readUntil(startBlock: Number, checkConditionUntil: Function, maxBlocks?: Number, startListen?: any): Promise<{}>;
    parseNdef(ndef: any): any;
    Uint8ArraySplice(arr: any, starting: any, deleteCount: any, elements?: any): any;
    byteArrayToInt(byteArray: any): number;
    bytesToString(array: any): string;
}
